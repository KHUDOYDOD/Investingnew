import { NextResponse } from "next/server"
import { query } from "@/lib/database"

export async function PUT(request: Request, { params }: { params: { id: string } }) {
  try {
    const { id } = params
    const body = await request.json()
    const { status, admin_comment } = body

    console.log("üîÑ Updating deposit request:", id, "Status:", status)

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    const depositResult = await query(
      `SELECT * FROM transactions WHERE id = $1 AND type = 'deposit'`,
      [id]
    )

    if (depositResult.rows.length === 0) {
      console.error("‚ùå Deposit request not found")
      return NextResponse.json({ error: "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
    }

    const depositRequest = depositResult.rows[0]

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    await query(
      `UPDATE transactions SET status = $1, updated_at = NOW() WHERE id = $2`,
      [status === "approved" ? "completed" : "failed", id]
    )

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω, –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    if (status === "approved") {
      await query(
        `UPDATE users SET balance = balance + $1 WHERE id = $2`,
        [depositRequest.amount, depositRequest.user_id]
      )

      console.log("‚úÖ Deposit approved and balance updated")
    }

    return NextResponse.json({
      success: true,
      message: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${status === "approved" ? "–æ–¥–æ–±—Ä–µ–Ω" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω"}`,
    })
  } catch (error) {
    console.error("‚ùå Admin deposit request update error:", error)
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
